Written by Peter Carbonetto
Date: September 17, 2001

Lecture notes
-------------

Decomposition: breaking a large problem into smaller subproblems.

Abstraction: once we've solved a subproblem, we don't worry about 
how it works, as long as we know it computes the solution correctly. 

Environment: list of names with corresponding values.

Questions
---------

Evaluate.
1. ((lambda (xx yy zz) (- (* xx yy) zz)) 15 25 5)
2. ((lambda (x) (* 2 x)) ((lambda (y) (+ y 1)) 3))
3. ((lambda (y x) (y x x)) (lambda (x y) (* x y)) (lambda () 12)))
4. ((lambda (x) (x 1 2 3)) (lambda (x) (* x x x)))

What is the environment created by this series of statements?
5. (define u 35)
6. (define v 17)
7. (define w (+ u v))
8. (define u (lambda (x) (- x 2)))
9. (define x (u w)) 

After the following series of statements
> (define four 4)
> (define six (lambda () 6))
what is the value of the statements below?
10. (+ four 1)
11. (+ (four) 1)
12. (+ six 1)
13. (+ (six) 1)


14. What is the value at the end of this series of statements?
    > (define a 1)
    > (define b (lambda (x) (+ a x)))
    > (define a 2)
    > (b 2)

Answers
-------
1. 370 2. 8 3. 144 4. Error: the second lambda should have 3 parameters, 
not just one. 5. (Note that I represent the environment using brackets) { 
u = 35 } 6. { u = 35, v = 17 } 7. { u = 35, v = 17, w = 52 } 8. { u = 
procedure, v = 17, w = 52 } 9. { u = procedure, v = 17, w = 52, x = 50 }
10. 5 11. Error: four is not a procedure 12. Error: six is not a number 
13. 7 14. 4
